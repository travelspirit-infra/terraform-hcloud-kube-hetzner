---
# Create a secret for the test user password
apiVersion: v1
kind: Secret
metadata:
  name: testuser-credentials
  namespace: postgres
type: Opaque
stringData:
  username: testuser
  password: test123

---
# Database resource to ensure 'testing' database exists
apiVersion: postgresql.cnpg.io/v1
kind: Database
metadata:
  name: testing-db
  namespace: postgres
spec:
  cluster:
    name: postgres-cluster
  name: testing
  owner: testuser

---
# Create the test user with database permissions
apiVersion: v1
kind: ConfigMap
metadata:
  name: testuser-init-script
  namespace: postgres
data:
  init.sql: |
    -- Create the test user if it doesn't exist
    DO $$
    BEGIN
      IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'testuser') THEN
        CREATE USER testuser WITH PASSWORD 'test123';
      END IF;
    END
    $$;
    
    -- Create the testing database if it doesn't exist
    SELECT 'CREATE DATABASE testing OWNER testuser'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'testing')\gexec
    
    -- Grant necessary permissions
    GRANT CONNECT ON DATABASE testing TO testuser;
    GRANT USAGE ON SCHEMA public TO testuser;
    GRANT CREATE ON SCHEMA public TO testuser;
    GRANT ALL PRIVILEGES ON DATABASE testing TO testuser;

---
# Job to execute the initialization script
apiVersion: batch/v1
kind: Job
metadata:
  name: create-testuser
  namespace: postgres
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: postgres-client
        image: postgres:16-alpine
        env:
        - name: PGHOST
          value: "postgres-rw.postgres.svc.cluster.local"
        - name: PGPORT
          value: "5432"
        - name: PGUSER
          value: "postgres"
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-superuser-secret
              key: password
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Connecting to PostgreSQL cluster..."
          
          # Wait for database to be ready
          until pg_isready; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 5
          done
          
          echo "Executing initialization script..."
          psql << 'EOF'
          -- Create the test user if it doesn't exist
          DO $$
          BEGIN
            IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'testuser') THEN
              CREATE USER testuser WITH PASSWORD 'test123';
              RAISE NOTICE 'User testuser created successfully';
            ELSE
              RAISE NOTICE 'User testuser already exists';
            END IF;
          END
          $$;
          
          -- Create the testing database if it doesn't exist
          DO $$
          BEGIN
            IF NOT EXISTS (SELECT FROM pg_database WHERE datname = 'testing') THEN
              PERFORM dblink_exec('host=postgres-rw.postgres.svc.cluster.local port=5432 dbname=postgres user=postgres', 'CREATE DATABASE testing OWNER testuser');
              RAISE NOTICE 'Database testing created successfully';
            ELSE
              RAISE NOTICE 'Database testing already exists';
            END IF;
          EXCEPTION WHEN OTHERS THEN
            -- Fallback: try direct CREATE DATABASE (will fail if already exists, which is fine)
            CREATE DATABASE testing OWNER testuser;
            RAISE NOTICE 'Database testing created successfully (fallback method)';
          END
          $$;
          EOF
          
          # Connect to the testing database and set up permissions
          echo "Setting up permissions on testing database..."
          PGDATABASE=testing psql << 'EOF'
          -- Grant necessary permissions
          GRANT CONNECT ON DATABASE testing TO testuser;
          GRANT USAGE ON SCHEMA public TO testuser;
          GRANT CREATE ON SCHEMA public TO testuser;
          GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO testuser;
          GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO testuser;
          GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO testuser;
          
          -- Ensure future objects are also granted to testuser
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO testuser;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO testuser;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO testuser;
          
          -- Create a simple test table
          CREATE TABLE IF NOT EXISTS test_table (
            id SERIAL PRIMARY KEY,
            name VARCHAR(100),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          
          -- Insert a test record
          INSERT INTO test_table (name) VALUES ('Hello from testuser!') 
          ON CONFLICT DO NOTHING;
          EOF
          
          echo "âœ… Test user and database setup completed successfully!"
          echo ""
          echo "Connection details:"
          echo "  Database: testing"
          echo "  User: testuser"
          echo "  Password: test123"
          echo "  Host: postgres-rw.postgres.svc.cluster.local (read-write)"
          echo "  Host: postgres-ro.postgres.svc.cluster.local (read-only)"
          echo "  Port: 5432"
      tolerations:
      - key: "architecture"
        value: "arm64"
        effect: "NoSchedule"