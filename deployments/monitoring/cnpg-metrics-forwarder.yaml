---
# Simple Prometheus to forward CNPG metrics to remote Prometheus
apiVersion: v1
kind: ConfigMap
metadata:
  name: cnpg-prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 30s
      evaluation_interval: 30s
      external_labels:
        cluster: 'k3s-hetzner'
        region: 'eu-central'
        component: 'cnpg-monitoring'

    remote_write:
    - url: "https://prometheus.travelspirit.cloud/api/v1/write"
      headers:
        X-Scope-OrgID: "travelspirit"

    scrape_configs:
    # CloudNativePG Operator monitoring
    - job_name: 'cnpg-operator'
      scrape_interval: 30s
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - cnpg-system
      relabel_configs:
      # Only scrape services with prometheus.io/scrape annotation
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      # Use the annotated port
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      # Add service and namespace labels
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: service
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
        
    # PostgreSQL clusters monitoring (when they have postgres_exporter)
    - job_name: 'cnpg-postgres-clusters'
      scrape_interval: 30s
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - postgres
      relabel_configs:
      # Only scrape postgres pods with monitoring enabled
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      # Use the annotated port (typically 9187 for postgres_exporter)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      # Add cluster and pod labels
      - source_labels: [__meta_kubernetes_pod_label_cnpg_io_cluster]
        action: replace
        target_label: cnpg_cluster
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cnpg-prometheus-forwarder
  namespace: monitoring
  labels:
    app: cnpg-prometheus-forwarder
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cnpg-prometheus-forwarder
  template:
    metadata:
      labels:
        app: cnpg-prometheus-forwarder
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.54.1
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus/
        - --web.enable-lifecycle
        - --storage.tsdb.retention.time=10m  # Short retention, just for forwarding
        - --web.listen-address=0.0.0.0:9091  # Different port to avoid conflicts
        ports:
        - containerPort: 9091
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus/
        - name: prometheus-storage-volume
          mountPath: /prometheus/
      volumes:
      - name: config-volume
        configMap:
          name: cnpg-prometheus-config
      - name: prometheus-storage-volume
        emptyDir: {}
      tolerations:
      - key: architecture
        operator: Equal
        value: arm64
        effect: NoSchedule